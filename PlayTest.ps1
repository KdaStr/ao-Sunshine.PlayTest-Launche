# Установка кодировки консоли на Windows-1251chcp 1251 > $null[Console]::OutputEncoding = [System.Text.Encoding]::GetEncoding(1251)# Установка цвета текста$host.UI.RawUI.ForegroundColor = 'DarkYellow'# ASCII-артWrite-Host "ao-Sunshine PlayTest Launcher"# Завершение процесса Sunshine_client.exefunction Kill-SunshineClient {    $process = Get-Process -Name "Sunshine_client" -ErrorAction SilentlyContinue    if ($process) {        Write-Host "Завершаю процесс Sunshine_client.exe..."        Stop-Process -Name "Sunshine_client" -Force    }}# Получение параметра downloadDirectory из JSONfunction Get-DownloadDirectory {    $configPath = "$env:APPDATA\ao_Sunshine\config.json"    if (Test-Path -LiteralPath $configPath) {        $configContent = Get-Content -LiteralPath $configPath -Raw -Encoding UTF8 | ConvertFrom-Json        return [System.IO.Path]::Combine($configContent.downloadDirectory, "ao_Sunshine")    } else {        Write-Host "Файл config.json не найден."        exit    }}# Проверка файлов и загрузка недостающихfunction Check-And-DownloadFiles {    param (        [string]$directory    )    $files = @(        @{ Path = [System.IO.Path]::Combine($directory, "data\Packs\Bin.pak"); Url = "https://allods-sunshine.com/test/Bin.pak" },        @{ Path = [System.IO.Path]::Combine($directory, "data\Packs\Kit1.pak"); Url = "https://allods-sunshine.com/test/Kit1.pak" },        @{ Path = [System.IO.Path]::Combine($directory, "data\Bin\pack.loc"); Url = "https://allods-sunshine.com/test/pack.loc" }    )    foreach ($file in $files) {        if (-not (Test-Path -LiteralPath $file.Path)) {            Write-Host "Файл $($file.Path) отсутствует. Загружаю..."            Invoke-WebRequest -Uri $file.Url -OutFile $file.Path        } else {            Write-Host "Файл $($file.Path) уже существует."        }    }}# Запуск Sunshine_client.exefunction Start-SunshineClient {    $clientPath = [System.IO.Path]::Combine($directory, "bin\Sunshine_client.exe")    if (Test-Path -LiteralPath $clientPath) {        Write-Host "Запускаю Sunshine_client.exe..."        Start-Process -FilePath $clientPath -WorkingDirectory (Split-Path -Path $clientPath) -NoNewWindow -Wait    } else {        Write-Host "Sunshine_client.exe не найден."    }}# Таймер отсчета перед автоматическим запускомfunction Countdown-Timer {    param (        [int]$seconds    )    for ($i = $seconds; $i -ge 0; $i--) {        Write-Host -NoNewline "`rАвтоматический запуск через $i секунд..."        Start-Sleep -Seconds 1    }    Write-Host "`rАвтоматический запуск сейчас!             "}# Основное меню с таймеромfunction Main-Menu {    Write-Host "Выберите действие:"    Write-Host "1. Запустить"    Write-Host "2. Обновить"    Write-Host "Введите ваш выбор (1 или 2) в течение 10 секунд (по умолчанию 'Запустить')"    $timeout = 10    # Запускаем таймер в фоне    $timerTask = Start-Job -ScriptBlock { Countdown-Timer -seconds $timeout }    # Ввод пользователя с таймаутом    $choice = $null    $startTime = [DateTime]::Now    while (([DateTime]::Now - $startTime).TotalSeconds -lt $timeout -and !$choice) {        if ($Host.UI.RawUI.KeyAvailable) {            $choice = Read-Host "Ввод"        }        Start-Sleep -Milliseconds 100    }    # Останавливаем таймер, если пользователь сделал выбор    Stop-Job $timerTask > $null 2>&1    Remove-Job $timerTask > $null 2>&1    if ([string]::IsNullOrWhiteSpace($choice)) {        $choice = 1  # По умолчанию "Запустить"    }    switch ($choice) {        1 {            # Выполнение действия "Запустить"            Kill-SunshineClient            $directory = Get-DownloadDirectory            Check-And-DownloadFiles -directory $directory            Start-SunshineClient        }        2 {            # Выполнение действия "Обновить"            Kill-SunshineClient            $directory = Get-DownloadDirectory            # Перезагрузка файлов            $files = @(                @{ Path = [System.IO.Path]::Combine($directory, "data\Packs\Bin.pak"); Url = "https://allods-sunshine.com/test/Bin.pak" },                @{ Path = [System.IO.Path]::Combine($directory, "data\Packs\Kit1.pak"); Url = "https://allods-sunshine.com/test/Kit1.pak" },                @{ Path = [System.IO.Path]::Combine($directory, "data\Bin\pack.loc"); Url = "https://allods-sunshine.com/test/pack.loc" }            )            foreach ($file in $files) {                Write-Host "Перезаписываю $($file.Path)..."                if (Test-Path -LiteralPath $file.Path) {                    Remove-Item -LiteralPath $file.Path -Force                }                Invoke-WebRequest -Uri $file.Url -OutFile $file.Path            }            Start-SunshineClient        }        default {            Write-Host "Неверный выбор. Попробуйте снова."            Main-Menu        }    }}# Запуск основного менюMain-Menu# Ожидание нажатия любой клавиши перед завершениемRead-Host "Нажмите любую клавишу для завершения"